# You're free to change the jobs and the workflow logic as needed.
# Doc: https://circleci.com/docs/2.0/getting-started/#running-your-first-circleci-build
version: 2.1
jobs:
  build:
    docker:
      - image: circleci/python:3.7.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "webserver/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r webserver/requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "webserver/requirements.txt" }}

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            pytest
  packer-validate:
    docker:
      - image: circleci/python:3.7.4
    
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "webserver/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Setup packer build environment
          command: | 
            python3 -m venv venv
            . venv/bin/activate
            pip install -r webserver/requirements.txt
            curl https://releases.hashicorp.com/packer/1.5.1/packer_1.5.1_linux_amd64.zip > /tmp/packer.zip
            unzip /tmp/packer.zip -d ~/repo/packer/
      - run:
          name: validate packer build
          command: |
            . venv/bin/activate 
            cd packer
            ./packer validate webserver-ami.json
      - persist_to_workspace:
          root: .
          paths:
            - packer/packer       
  
  packer-build:
    docker:
     - image: circleci/python:3.7.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "webserver/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - attach_workspace:
          at: ~/repo
      - run:
          name: Build webserver ami
          command: | 
            . venv/bin/activate
            cd packer
            ./packer build webserver-ami.json
      - persist_to_workspace:
          root: .
          paths:
            - packer/manifest.json
  terraform:
    environment:
      TF_IN_AUTOMATION: 1
      TF_WORKSPACE: circleci
      TF_CLI_CONFIG_FILE: /root/repo/.terraformrc
    docker:
      - image: hashicorp/terraform:0.12.20
    working_directory: /root/repo
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run: 
          name: terraform rc
          command: |
            echo $TERRAFORMRC > /tmp/encoded
            base64 -d /tmp/encoded > $TF_CLI_CONFIG_FILE
      - run:
          name: install jq
          command: apk add jq
      - run:
          name: Terraform
          command: |
            cd packer
            export TF_VAR_ami_id=`cat manifest.json | jq -r .builds[0].artifact_id |  cut -d':' -f2`
            cd ../terraform
            terraform init -input=false
            terraform plan
      - persist_to_workspace:
          root: .
          paths:
            - terraform/.terraform
            - .terraformrc
  terraform-apply:
    environment:
      TF_IN_AUTOMATION: 1
      TF_WORKSPACE: prod
      TF_CLI_CONFIG_FILE: /root/repo/.terraformrc
    working_directory: /root/repo
    docker:
      - image: hashicorp/terraform:0.12.20
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: install jq
          command: apk add jq
      - run:
          name: Terraform
          command: |
            cd packer
            export TF_VAR_ami_id=`cat manifest.json | jq -r .builds[0].artifact_id |  cut -d':' -f2`
            cd ../terraform
            terraform apply --auto-approve
    
  cleanup:
    docker:
     - image: circleci/python:3.7.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "webserver/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - attach_workspace:
          at: ~/repo
      - run:
          name: Remove packer build
          command: | 
            . venv/bin/activate
            sudo apt-get install jq
            cd packer
            export AMI_ID=`cat manifest.json | jq -r .builds[0].artifact_id |  cut -d':' -f2`
            export SNAP_ID=`aws ec2 describe-images --output text --image-id $AMI_ID --query Images[*].BlockDeviceMappings[*].Ebs.SnapshotId`
            aws ec2 deregister-image --image-id $AMI_ID
            aws ec2 delete-snapshot --snapshot-id $SNAP_ID

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - packer-validate
      - packer-build:
          requires:
            - build
            - packer-validate
      - terraform:
          requires:
            - packer-build
      - terraform-apply:
          requires:
            - terraform
          filters:
            branches:
              only: master
      - cleanup:
          requires:
            - terraform
          filters:
            branches:
              ignore: master